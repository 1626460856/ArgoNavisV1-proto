// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.31.1
// source: api/push/v1/push.proto

package push

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPushPushCodeToStudent = "/Push.Push/PushCodeToStudent"

type PushHTTPServer interface {
	// PushCodeToStudent 推送一条带 code 的消息给某个群组
	PushCodeToStudent(context.Context, *PushCodeReq) (*PushReply, error)
}

func RegisterPushHTTPServer(s *http.Server, srv PushHTTPServer) {
	r := s.Route("/")
	r.POST("/push/notice/code-message", _Push_PushCodeToStudent0_HTTP_Handler(srv))
}

func _Push_PushCodeToStudent0_HTTP_Handler(srv PushHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PushCodeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPushPushCodeToStudent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PushCodeToStudent(ctx, req.(*PushCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PushReply)
		return ctx.Result(200, reply)
	}
}

type PushHTTPClient interface {
	PushCodeToStudent(ctx context.Context, req *PushCodeReq, opts ...http.CallOption) (rsp *PushReply, err error)
}

type PushHTTPClientImpl struct {
	cc *http.Client
}

func NewPushHTTPClient(client *http.Client) PushHTTPClient {
	return &PushHTTPClientImpl{client}
}

func (c *PushHTTPClientImpl) PushCodeToStudent(ctx context.Context, in *PushCodeReq, opts ...http.CallOption) (*PushReply, error) {
	var out PushReply
	pattern := "/push/notice/code-message"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPushPushCodeToStudent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
