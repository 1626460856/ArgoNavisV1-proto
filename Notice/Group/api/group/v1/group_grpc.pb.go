// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: api/group/v1/group.proto

package group_check

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Group_GetGroupDetail_FullMethodName    = "/GroupCheck.Group/GetGroupDetail"
	Group_GetClassDetail_FullMethodName    = "/GroupCheck.Group/GetClassDetail"
	Group_SearchStudent_FullMethodName     = "/GroupCheck.Group/SearchStudent"
	Group_GetGradeClassTree_FullMethodName = "/GroupCheck.Group/GetGradeClassTree"
	Group_ListPersonGroup_FullMethodName   = "/GroupCheck.Group/ListPersonGroup"
	Group_ListPositionGroup_FullMethodName = "/GroupCheck.Group/ListPositionGroup"
	Group_ListClassGroup_FullMethodName    = "/GroupCheck.Group/ListClassGroup"
	Group_DeleteGroup_FullMethodName       = "/GroupCheck.Group/DeleteGroup"
	Group_CreateGroup_FullMethodName       = "/GroupCheck.Group/CreateGroup"
	Group_UpdateGroup_FullMethodName       = "/GroupCheck.Group/UpdateGroup"
)

// GroupClient is the client API for Group service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupClient interface {
	// 获取单个群组旧信息
	GetGroupDetail(ctx context.Context, in *GetGroupReq, opts ...grpc.CallOption) (*GetGroupResp, error)
	// 获取班级-学生详情
	GetClassDetail(ctx context.Context, in *GetClassDetailReq, opts ...grpc.CallOption) (*GetClassDetailResp, error)
	// 根据姓名查询学生列表
	SearchStudent(ctx context.Context, in *SearchStudentReq, opts ...grpc.CallOption) (*SearchStudentResp, error)
	// 获取年级-专业-班级分层结构
	GetGradeClassTree(ctx context.Context, in *GetGradeClassTreeReq, opts ...grpc.CallOption) (*GetGradeClassTreeResp, error)
	// 获取个人群组列表
	ListPersonGroup(ctx context.Context, in *GetPersonalGroupsReq, opts ...grpc.CallOption) (*ListPersonGroupResp, error)
	// 获取职位群组列表
	ListPositionGroup(ctx context.Context, in *GetPositionGroupsReq, opts ...grpc.CallOption) (*ListPositionGroupResp, error)
	// 获取班级群组列表
	ListClassGroup(ctx context.Context, in *GetClassGroupsReq, opts ...grpc.CallOption) (*ListClassGroupResp, error)
	// 删除群组
	DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*CommonResp, error)
	// 新建群组
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CommonResp, error)
	// 修改群组
	UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type groupClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupClient(cc grpc.ClientConnInterface) GroupClient {
	return &groupClient{cc}
}

func (c *groupClient) GetGroupDetail(ctx context.Context, in *GetGroupReq, opts ...grpc.CallOption) (*GetGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGroupResp)
	err := c.cc.Invoke(ctx, Group_GetGroupDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetClassDetail(ctx context.Context, in *GetClassDetailReq, opts ...grpc.CallOption) (*GetClassDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClassDetailResp)
	err := c.cc.Invoke(ctx, Group_GetClassDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) SearchStudent(ctx context.Context, in *SearchStudentReq, opts ...grpc.CallOption) (*SearchStudentResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchStudentResp)
	err := c.cc.Invoke(ctx, Group_SearchStudent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGradeClassTree(ctx context.Context, in *GetGradeClassTreeReq, opts ...grpc.CallOption) (*GetGradeClassTreeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGradeClassTreeResp)
	err := c.cc.Invoke(ctx, Group_GetGradeClassTree_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) ListPersonGroup(ctx context.Context, in *GetPersonalGroupsReq, opts ...grpc.CallOption) (*ListPersonGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPersonGroupResp)
	err := c.cc.Invoke(ctx, Group_ListPersonGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) ListPositionGroup(ctx context.Context, in *GetPositionGroupsReq, opts ...grpc.CallOption) (*ListPositionGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPositionGroupResp)
	err := c.cc.Invoke(ctx, Group_ListPositionGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) ListClassGroup(ctx context.Context, in *GetClassGroupsReq, opts ...grpc.CallOption) (*ListClassGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClassGroupResp)
	err := c.cc.Invoke(ctx, Group_ListClassGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*CommonResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, Group_DeleteGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CommonResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, Group_CreateGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*CommonResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, Group_UpdateGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupServer is the server API for Group service.
// All implementations must embed UnimplementedGroupServer
// for forward compatibility.
type GroupServer interface {
	// 获取单个群组旧信息
	GetGroupDetail(context.Context, *GetGroupReq) (*GetGroupResp, error)
	// 获取班级-学生详情
	GetClassDetail(context.Context, *GetClassDetailReq) (*GetClassDetailResp, error)
	// 根据姓名查询学生列表
	SearchStudent(context.Context, *SearchStudentReq) (*SearchStudentResp, error)
	// 获取年级-专业-班级分层结构
	GetGradeClassTree(context.Context, *GetGradeClassTreeReq) (*GetGradeClassTreeResp, error)
	// 获取个人群组列表
	ListPersonGroup(context.Context, *GetPersonalGroupsReq) (*ListPersonGroupResp, error)
	// 获取职位群组列表
	ListPositionGroup(context.Context, *GetPositionGroupsReq) (*ListPositionGroupResp, error)
	// 获取班级群组列表
	ListClassGroup(context.Context, *GetClassGroupsReq) (*ListClassGroupResp, error)
	// 删除群组
	DeleteGroup(context.Context, *DeleteGroupReq) (*CommonResp, error)
	// 新建群组
	CreateGroup(context.Context, *CreateGroupReq) (*CommonResp, error)
	// 修改群组
	UpdateGroup(context.Context, *UpdateGroupReq) (*CommonResp, error)
	mustEmbedUnimplementedGroupServer()
}

// UnimplementedGroupServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGroupServer struct{}

func (UnimplementedGroupServer) GetGroupDetail(context.Context, *GetGroupReq) (*GetGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupDetail not implemented")
}
func (UnimplementedGroupServer) GetClassDetail(context.Context, *GetClassDetailReq) (*GetClassDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassDetail not implemented")
}
func (UnimplementedGroupServer) SearchStudent(context.Context, *SearchStudentReq) (*SearchStudentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchStudent not implemented")
}
func (UnimplementedGroupServer) GetGradeClassTree(context.Context, *GetGradeClassTreeReq) (*GetGradeClassTreeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGradeClassTree not implemented")
}
func (UnimplementedGroupServer) ListPersonGroup(context.Context, *GetPersonalGroupsReq) (*ListPersonGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPersonGroup not implemented")
}
func (UnimplementedGroupServer) ListPositionGroup(context.Context, *GetPositionGroupsReq) (*ListPositionGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPositionGroup not implemented")
}
func (UnimplementedGroupServer) ListClassGroup(context.Context, *GetClassGroupsReq) (*ListClassGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClassGroup not implemented")
}
func (UnimplementedGroupServer) DeleteGroup(context.Context, *DeleteGroupReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedGroupServer) CreateGroup(context.Context, *CreateGroupReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedGroupServer) UpdateGroup(context.Context, *UpdateGroupReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedGroupServer) mustEmbedUnimplementedGroupServer() {}
func (UnimplementedGroupServer) testEmbeddedByValue()               {}

// UnsafeGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupServer will
// result in compilation errors.
type UnsafeGroupServer interface {
	mustEmbedUnimplementedGroupServer()
}

func RegisterGroupServer(s grpc.ServiceRegistrar, srv GroupServer) {
	// If the following call pancis, it indicates UnimplementedGroupServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Group_ServiceDesc, srv)
}

func _Group_GetGroupDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_GetGroupDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupDetail(ctx, req.(*GetGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetClassDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClassDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetClassDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_GetClassDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetClassDetail(ctx, req.(*GetClassDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_SearchStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchStudentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).SearchStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_SearchStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).SearchStudent(ctx, req.(*SearchStudentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGradeClassTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGradeClassTreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGradeClassTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_GetGradeClassTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGradeClassTree(ctx, req.(*GetGradeClassTreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_ListPersonGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonalGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).ListPersonGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_ListPersonGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).ListPersonGroup(ctx, req.(*GetPersonalGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_ListPositionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPositionGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).ListPositionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_ListPositionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).ListPositionGroup(ctx, req.(*GetPositionGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_ListClassGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClassGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).ListClassGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_ListClassGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).ListClassGroup(ctx, req.(*GetClassGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).DeleteGroup(ctx, req.(*DeleteGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).CreateGroup(ctx, req.(*CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_UpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).UpdateGroup(ctx, req.(*UpdateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Group_ServiceDesc is the grpc.ServiceDesc for Group service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Group_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GroupCheck.Group",
	HandlerType: (*GroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGroupDetail",
			Handler:    _Group_GetGroupDetail_Handler,
		},
		{
			MethodName: "GetClassDetail",
			Handler:    _Group_GetClassDetail_Handler,
		},
		{
			MethodName: "SearchStudent",
			Handler:    _Group_SearchStudent_Handler,
		},
		{
			MethodName: "GetGradeClassTree",
			Handler:    _Group_GetGradeClassTree_Handler,
		},
		{
			MethodName: "ListPersonGroup",
			Handler:    _Group_ListPersonGroup_Handler,
		},
		{
			MethodName: "ListPositionGroup",
			Handler:    _Group_ListPositionGroup_Handler,
		},
		{
			MethodName: "ListClassGroup",
			Handler:    _Group_ListClassGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _Group_DeleteGroup_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Group_CreateGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _Group_UpdateGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/group/v1/group.proto",
}
