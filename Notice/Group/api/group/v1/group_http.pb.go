// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.31.1
// source: api/group/v1/group.proto

package group_check

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGroupCreateGroup = "/GroupCheck.Group/CreateGroup"
const OperationGroupDeleteGroup = "/GroupCheck.Group/DeleteGroup"
const OperationGroupGetClassDetail = "/GroupCheck.Group/GetClassDetail"
const OperationGroupGetGradeClassTree = "/GroupCheck.Group/GetGradeClassTree"
const OperationGroupGetGroupDetail = "/GroupCheck.Group/GetGroupDetail"
const OperationGroupListClassGroup = "/GroupCheck.Group/ListClassGroup"
const OperationGroupListPersonGroup = "/GroupCheck.Group/ListPersonGroup"
const OperationGroupListPositionGroup = "/GroupCheck.Group/ListPositionGroup"
const OperationGroupSearchStudent = "/GroupCheck.Group/SearchStudent"
const OperationGroupUpdateGroup = "/GroupCheck.Group/UpdateGroup"

type GroupHTTPServer interface {
	// CreateGroup 新建群组
	CreateGroup(context.Context, *CreateGroupReq) (*CommonResp, error)
	// DeleteGroup 删除群组
	DeleteGroup(context.Context, *DeleteGroupReq) (*CommonResp, error)
	// GetClassDetail 获取班级-学生详情
	GetClassDetail(context.Context, *GetClassDetailReq) (*GetClassDetailResp, error)
	// GetGradeClassTree 获取年级-专业-班级分层结构
	GetGradeClassTree(context.Context, *GetGradeClassTreeReq) (*GetGradeClassTreeResp, error)
	// GetGroupDetail 获取单个群组旧信息
	GetGroupDetail(context.Context, *GetGroupReq) (*GetGroupResp, error)
	// ListClassGroup 获取班级群组列表
	ListClassGroup(context.Context, *GetClassGroupsReq) (*ListClassGroupResp, error)
	// ListPersonGroup 获取个人群组列表
	ListPersonGroup(context.Context, *GetPersonalGroupsReq) (*ListPersonGroupResp, error)
	// ListPositionGroup 获取职位群组列表
	ListPositionGroup(context.Context, *GetPositionGroupsReq) (*ListPositionGroupResp, error)
	// SearchStudent 根据姓名查询学生列表
	SearchStudent(context.Context, *SearchStudentReq) (*SearchStudentResp, error)
	// UpdateGroup 修改群组
	UpdateGroup(context.Context, *UpdateGroupReq) (*CommonResp, error)
}

func RegisterGroupHTTPServer(s *http.Server, srv GroupHTTPServer) {
	r := s.Route("/")
	r.GET("/group/check/detail", _Group_GetGroupDetail0_HTTP_Handler(srv))
	r.GET("/group/check/class/details", _Group_GetClassDetail0_HTTP_Handler(srv))
	r.GET("/group/check/students", _Group_SearchStudent0_HTTP_Handler(srv))
	r.GET("/group/check/grade-structure", _Group_GetGradeClassTree0_HTTP_Handler(srv))
	r.GET("/group/check/list/personal", _Group_ListPersonGroup0_HTTP_Handler(srv))
	r.GET("/group/check/list/position", _Group_ListPositionGroup0_HTTP_Handler(srv))
	r.GET("/group/check/list/class", _Group_ListClassGroup0_HTTP_Handler(srv))
	r.POST("/group/manage/delete", _Group_DeleteGroup0_HTTP_Handler(srv))
	r.POST("/group/manage/add", _Group_CreateGroup0_HTTP_Handler(srv))
	r.POST("/group/manage/update", _Group_UpdateGroup0_HTTP_Handler(srv))
}

func _Group_GetGroupDetail0_HTTP_Handler(srv GroupHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGroupReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGroupGetGroupDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGroupDetail(ctx, req.(*GetGroupReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetGroupResp)
		return ctx.Result(200, reply)
	}
}

func _Group_GetClassDetail0_HTTP_Handler(srv GroupHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetClassDetailReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGroupGetClassDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetClassDetail(ctx, req.(*GetClassDetailReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetClassDetailResp)
		return ctx.Result(200, reply)
	}
}

func _Group_SearchStudent0_HTTP_Handler(srv GroupHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchStudentReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGroupSearchStudent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchStudent(ctx, req.(*SearchStudentReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchStudentResp)
		return ctx.Result(200, reply)
	}
}

func _Group_GetGradeClassTree0_HTTP_Handler(srv GroupHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGradeClassTreeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGroupGetGradeClassTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGradeClassTree(ctx, req.(*GetGradeClassTreeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetGradeClassTreeResp)
		return ctx.Result(200, reply)
	}
}

func _Group_ListPersonGroup0_HTTP_Handler(srv GroupHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPersonalGroupsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGroupListPersonGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPersonGroup(ctx, req.(*GetPersonalGroupsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPersonGroupResp)
		return ctx.Result(200, reply)
	}
}

func _Group_ListPositionGroup0_HTTP_Handler(srv GroupHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPositionGroupsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGroupListPositionGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPositionGroup(ctx, req.(*GetPositionGroupsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPositionGroupResp)
		return ctx.Result(200, reply)
	}
}

func _Group_ListClassGroup0_HTTP_Handler(srv GroupHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetClassGroupsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGroupListClassGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListClassGroup(ctx, req.(*GetClassGroupsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListClassGroupResp)
		return ctx.Result(200, reply)
	}
}

func _Group_DeleteGroup0_HTTP_Handler(srv GroupHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteGroupReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGroupDeleteGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteGroup(ctx, req.(*DeleteGroupReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CommonResp)
		return ctx.Result(200, reply)
	}
}

func _Group_CreateGroup0_HTTP_Handler(srv GroupHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateGroupReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGroupCreateGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateGroup(ctx, req.(*CreateGroupReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CommonResp)
		return ctx.Result(200, reply)
	}
}

func _Group_UpdateGroup0_HTTP_Handler(srv GroupHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateGroupReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGroupUpdateGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateGroup(ctx, req.(*UpdateGroupReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CommonResp)
		return ctx.Result(200, reply)
	}
}

type GroupHTTPClient interface {
	CreateGroup(ctx context.Context, req *CreateGroupReq, opts ...http.CallOption) (rsp *CommonResp, err error)
	DeleteGroup(ctx context.Context, req *DeleteGroupReq, opts ...http.CallOption) (rsp *CommonResp, err error)
	GetClassDetail(ctx context.Context, req *GetClassDetailReq, opts ...http.CallOption) (rsp *GetClassDetailResp, err error)
	GetGradeClassTree(ctx context.Context, req *GetGradeClassTreeReq, opts ...http.CallOption) (rsp *GetGradeClassTreeResp, err error)
	GetGroupDetail(ctx context.Context, req *GetGroupReq, opts ...http.CallOption) (rsp *GetGroupResp, err error)
	ListClassGroup(ctx context.Context, req *GetClassGroupsReq, opts ...http.CallOption) (rsp *ListClassGroupResp, err error)
	ListPersonGroup(ctx context.Context, req *GetPersonalGroupsReq, opts ...http.CallOption) (rsp *ListPersonGroupResp, err error)
	ListPositionGroup(ctx context.Context, req *GetPositionGroupsReq, opts ...http.CallOption) (rsp *ListPositionGroupResp, err error)
	SearchStudent(ctx context.Context, req *SearchStudentReq, opts ...http.CallOption) (rsp *SearchStudentResp, err error)
	UpdateGroup(ctx context.Context, req *UpdateGroupReq, opts ...http.CallOption) (rsp *CommonResp, err error)
}

type GroupHTTPClientImpl struct {
	cc *http.Client
}

func NewGroupHTTPClient(client *http.Client) GroupHTTPClient {
	return &GroupHTTPClientImpl{client}
}

func (c *GroupHTTPClientImpl) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...http.CallOption) (*CommonResp, error) {
	var out CommonResp
	pattern := "/group/manage/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGroupCreateGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GroupHTTPClientImpl) DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...http.CallOption) (*CommonResp, error) {
	var out CommonResp
	pattern := "/group/manage/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGroupDeleteGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GroupHTTPClientImpl) GetClassDetail(ctx context.Context, in *GetClassDetailReq, opts ...http.CallOption) (*GetClassDetailResp, error) {
	var out GetClassDetailResp
	pattern := "/group/check/class/details"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGroupGetClassDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GroupHTTPClientImpl) GetGradeClassTree(ctx context.Context, in *GetGradeClassTreeReq, opts ...http.CallOption) (*GetGradeClassTreeResp, error) {
	var out GetGradeClassTreeResp
	pattern := "/group/check/grade-structure"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGroupGetGradeClassTree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GroupHTTPClientImpl) GetGroupDetail(ctx context.Context, in *GetGroupReq, opts ...http.CallOption) (*GetGroupResp, error) {
	var out GetGroupResp
	pattern := "/group/check/detail"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGroupGetGroupDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GroupHTTPClientImpl) ListClassGroup(ctx context.Context, in *GetClassGroupsReq, opts ...http.CallOption) (*ListClassGroupResp, error) {
	var out ListClassGroupResp
	pattern := "/group/check/list/class"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGroupListClassGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GroupHTTPClientImpl) ListPersonGroup(ctx context.Context, in *GetPersonalGroupsReq, opts ...http.CallOption) (*ListPersonGroupResp, error) {
	var out ListPersonGroupResp
	pattern := "/group/check/list/personal"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGroupListPersonGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GroupHTTPClientImpl) ListPositionGroup(ctx context.Context, in *GetPositionGroupsReq, opts ...http.CallOption) (*ListPositionGroupResp, error) {
	var out ListPositionGroupResp
	pattern := "/group/check/list/position"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGroupListPositionGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GroupHTTPClientImpl) SearchStudent(ctx context.Context, in *SearchStudentReq, opts ...http.CallOption) (*SearchStudentResp, error) {
	var out SearchStudentResp
	pattern := "/group/check/students"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGroupSearchStudent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GroupHTTPClientImpl) UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...http.CallOption) (*CommonResp, error) {
	var out CommonResp
	pattern := "/group/manage/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGroupUpdateGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
