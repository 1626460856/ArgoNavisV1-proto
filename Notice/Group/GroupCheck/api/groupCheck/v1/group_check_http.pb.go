// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.31.1
// source: api/groupCheck/v1/group_check.proto

package group_check

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGroupCheckGetClassDetail = "/GroupCheck.GroupCheck/GetClassDetail"
const OperationGroupCheckGetGradeClassTree = "/GroupCheck.GroupCheck/GetGradeClassTree"
const OperationGroupCheckGetGroup = "/GroupCheck.GroupCheck/GetGroup"
const OperationGroupCheckListClassGroup = "/GroupCheck.GroupCheck/ListClassGroup"
const OperationGroupCheckListJobGroup = "/GroupCheck.GroupCheck/ListJobGroup"
const OperationGroupCheckListPersonGroup = "/GroupCheck.GroupCheck/ListPersonGroup"
const OperationGroupCheckSearchStudent = "/GroupCheck.GroupCheck/SearchStudent"

type GroupCheckHTTPServer interface {
	// GetClassDetail 获取班级详情
	GetClassDetail(context.Context, *GetClassDetailReq) (*GetClassDetailResp, error)
	// GetGradeClassTree 获取年级-专业-班级层级
	GetGradeClassTree(context.Context, *GetGradeClassTreeReq) (*GetGradeClassTreeResp, error)
	// GetGroup 获取群组详情
	GetGroup(context.Context, *GetGroupReq) (*GetGroupResp, error)
	// ListClassGroup 获取班级群组列表
	ListClassGroup(context.Context, *GetClassGroupsReq) (*ListClassGroupResp, error)
	// ListJobGroup 获取职位群组列表
	ListJobGroup(context.Context, *GetPositionGroupsReq) (*ListPositionGroupResp, error)
	// ListPersonGroup 获取个人群组列表
	ListPersonGroup(context.Context, *GetPersonalGroupsReq) (*ListPersonGroupResp, error)
	// SearchStudent 搜索学生
	SearchStudent(context.Context, *SearchStudentReq) (*SearchStudentResp, error)
}

func RegisterGroupCheckHTTPServer(s *http.Server, srv GroupCheckHTTPServer) {
	r := s.Route("/")
	r.POST("/group/details", _GroupCheck_GetGroup0_HTTP_Handler(srv))
	r.GET("/group/create/class/info", _GroupCheck_GetClassDetail0_HTTP_Handler(srv))
	r.POST("/group/create/student/search", _GroupCheck_SearchStudent0_HTTP_Handler(srv))
	r.POST("/group/create/class/list", _GroupCheck_GetGradeClassTree0_HTTP_Handler(srv))
	r.GET("/group/list/personal", _GroupCheck_ListPersonGroup0_HTTP_Handler(srv))
	r.GET("/group/list/position", _GroupCheck_ListJobGroup0_HTTP_Handler(srv))
	r.GET("/group/list/class", _GroupCheck_ListClassGroup0_HTTP_Handler(srv))
}

func _GroupCheck_GetGroup0_HTTP_Handler(srv GroupCheckHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGroupReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGroupCheckGetGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGroup(ctx, req.(*GetGroupReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetGroupResp)
		return ctx.Result(200, reply)
	}
}

func _GroupCheck_GetClassDetail0_HTTP_Handler(srv GroupCheckHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetClassDetailReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGroupCheckGetClassDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetClassDetail(ctx, req.(*GetClassDetailReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetClassDetailResp)
		return ctx.Result(200, reply)
	}
}

func _GroupCheck_SearchStudent0_HTTP_Handler(srv GroupCheckHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchStudentReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGroupCheckSearchStudent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchStudent(ctx, req.(*SearchStudentReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchStudentResp)
		return ctx.Result(200, reply)
	}
}

func _GroupCheck_GetGradeClassTree0_HTTP_Handler(srv GroupCheckHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGradeClassTreeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGroupCheckGetGradeClassTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGradeClassTree(ctx, req.(*GetGradeClassTreeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetGradeClassTreeResp)
		return ctx.Result(200, reply)
	}
}

func _GroupCheck_ListPersonGroup0_HTTP_Handler(srv GroupCheckHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPersonalGroupsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGroupCheckListPersonGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPersonGroup(ctx, req.(*GetPersonalGroupsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPersonGroupResp)
		return ctx.Result(200, reply)
	}
}

func _GroupCheck_ListJobGroup0_HTTP_Handler(srv GroupCheckHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPositionGroupsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGroupCheckListJobGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListJobGroup(ctx, req.(*GetPositionGroupsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPositionGroupResp)
		return ctx.Result(200, reply)
	}
}

func _GroupCheck_ListClassGroup0_HTTP_Handler(srv GroupCheckHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetClassGroupsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGroupCheckListClassGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListClassGroup(ctx, req.(*GetClassGroupsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListClassGroupResp)
		return ctx.Result(200, reply)
	}
}

type GroupCheckHTTPClient interface {
	GetClassDetail(ctx context.Context, req *GetClassDetailReq, opts ...http.CallOption) (rsp *GetClassDetailResp, err error)
	GetGradeClassTree(ctx context.Context, req *GetGradeClassTreeReq, opts ...http.CallOption) (rsp *GetGradeClassTreeResp, err error)
	GetGroup(ctx context.Context, req *GetGroupReq, opts ...http.CallOption) (rsp *GetGroupResp, err error)
	ListClassGroup(ctx context.Context, req *GetClassGroupsReq, opts ...http.CallOption) (rsp *ListClassGroupResp, err error)
	ListJobGroup(ctx context.Context, req *GetPositionGroupsReq, opts ...http.CallOption) (rsp *ListPositionGroupResp, err error)
	ListPersonGroup(ctx context.Context, req *GetPersonalGroupsReq, opts ...http.CallOption) (rsp *ListPersonGroupResp, err error)
	SearchStudent(ctx context.Context, req *SearchStudentReq, opts ...http.CallOption) (rsp *SearchStudentResp, err error)
}

type GroupCheckHTTPClientImpl struct {
	cc *http.Client
}

func NewGroupCheckHTTPClient(client *http.Client) GroupCheckHTTPClient {
	return &GroupCheckHTTPClientImpl{client}
}

func (c *GroupCheckHTTPClientImpl) GetClassDetail(ctx context.Context, in *GetClassDetailReq, opts ...http.CallOption) (*GetClassDetailResp, error) {
	var out GetClassDetailResp
	pattern := "/group/create/class/info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGroupCheckGetClassDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GroupCheckHTTPClientImpl) GetGradeClassTree(ctx context.Context, in *GetGradeClassTreeReq, opts ...http.CallOption) (*GetGradeClassTreeResp, error) {
	var out GetGradeClassTreeResp
	pattern := "/group/create/class/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGroupCheckGetGradeClassTree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GroupCheckHTTPClientImpl) GetGroup(ctx context.Context, in *GetGroupReq, opts ...http.CallOption) (*GetGroupResp, error) {
	var out GetGroupResp
	pattern := "/group/details"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGroupCheckGetGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GroupCheckHTTPClientImpl) ListClassGroup(ctx context.Context, in *GetClassGroupsReq, opts ...http.CallOption) (*ListClassGroupResp, error) {
	var out ListClassGroupResp
	pattern := "/group/list/class"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGroupCheckListClassGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GroupCheckHTTPClientImpl) ListJobGroup(ctx context.Context, in *GetPositionGroupsReq, opts ...http.CallOption) (*ListPositionGroupResp, error) {
	var out ListPositionGroupResp
	pattern := "/group/list/position"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGroupCheckListJobGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GroupCheckHTTPClientImpl) ListPersonGroup(ctx context.Context, in *GetPersonalGroupsReq, opts ...http.CallOption) (*ListPersonGroupResp, error) {
	var out ListPersonGroupResp
	pattern := "/group/list/personal"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGroupCheckListPersonGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GroupCheckHTTPClientImpl) SearchStudent(ctx context.Context, in *SearchStudentReq, opts ...http.CallOption) (*SearchStudentResp, error) {
	var out SearchStudentResp
	pattern := "/group/create/student/search"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGroupCheckSearchStudent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
