// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: api/groupCheck/v1/group_check.proto

package group_check

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GroupCheck_GetGroup_FullMethodName          = "/GroupCheck.GroupCheck/GetGroup"
	GroupCheck_GetClassDetail_FullMethodName    = "/GroupCheck.GroupCheck/GetClassDetail"
	GroupCheck_SearchStudent_FullMethodName     = "/GroupCheck.GroupCheck/SearchStudent"
	GroupCheck_GetGradeClassTree_FullMethodName = "/GroupCheck.GroupCheck/GetGradeClassTree"
	GroupCheck_ListPersonGroup_FullMethodName   = "/GroupCheck.GroupCheck/ListPersonGroup"
	GroupCheck_ListJobGroup_FullMethodName      = "/GroupCheck.GroupCheck/ListJobGroup"
	GroupCheck_ListClassGroup_FullMethodName    = "/GroupCheck.GroupCheck/ListClassGroup"
)

// GroupCheckClient is the client API for GroupCheck service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ========== 服务定义 ==========
type GroupCheckClient interface {
	// 获取群组详情
	GetGroup(ctx context.Context, in *GetGroupReq, opts ...grpc.CallOption) (*GetGroupResp, error)
	// 获取班级详情
	GetClassDetail(ctx context.Context, in *GetClassDetailReq, opts ...grpc.CallOption) (*GetClassDetailResp, error)
	// 搜索学生
	SearchStudent(ctx context.Context, in *SearchStudentReq, opts ...grpc.CallOption) (*SearchStudentResp, error)
	// 获取年级-专业-班级层级
	GetGradeClassTree(ctx context.Context, in *GetGradeClassTreeReq, opts ...grpc.CallOption) (*GetGradeClassTreeResp, error)
	// 获取个人群组列表
	ListPersonGroup(ctx context.Context, in *GetPersonalGroupsReq, opts ...grpc.CallOption) (*ListPersonGroupResp, error)
	// 获取职位群组列表
	ListJobGroup(ctx context.Context, in *GetPositionGroupsReq, opts ...grpc.CallOption) (*ListPositionGroupResp, error)
	// 获取班级群组列表
	ListClassGroup(ctx context.Context, in *GetClassGroupsReq, opts ...grpc.CallOption) (*ListClassGroupResp, error)
}

type groupCheckClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupCheckClient(cc grpc.ClientConnInterface) GroupCheckClient {
	return &groupCheckClient{cc}
}

func (c *groupCheckClient) GetGroup(ctx context.Context, in *GetGroupReq, opts ...grpc.CallOption) (*GetGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGroupResp)
	err := c.cc.Invoke(ctx, GroupCheck_GetGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupCheckClient) GetClassDetail(ctx context.Context, in *GetClassDetailReq, opts ...grpc.CallOption) (*GetClassDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClassDetailResp)
	err := c.cc.Invoke(ctx, GroupCheck_GetClassDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupCheckClient) SearchStudent(ctx context.Context, in *SearchStudentReq, opts ...grpc.CallOption) (*SearchStudentResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchStudentResp)
	err := c.cc.Invoke(ctx, GroupCheck_SearchStudent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupCheckClient) GetGradeClassTree(ctx context.Context, in *GetGradeClassTreeReq, opts ...grpc.CallOption) (*GetGradeClassTreeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGradeClassTreeResp)
	err := c.cc.Invoke(ctx, GroupCheck_GetGradeClassTree_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupCheckClient) ListPersonGroup(ctx context.Context, in *GetPersonalGroupsReq, opts ...grpc.CallOption) (*ListPersonGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPersonGroupResp)
	err := c.cc.Invoke(ctx, GroupCheck_ListPersonGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupCheckClient) ListJobGroup(ctx context.Context, in *GetPositionGroupsReq, opts ...grpc.CallOption) (*ListPositionGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPositionGroupResp)
	err := c.cc.Invoke(ctx, GroupCheck_ListJobGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupCheckClient) ListClassGroup(ctx context.Context, in *GetClassGroupsReq, opts ...grpc.CallOption) (*ListClassGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClassGroupResp)
	err := c.cc.Invoke(ctx, GroupCheck_ListClassGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupCheckServer is the server API for GroupCheck service.
// All implementations must embed UnimplementedGroupCheckServer
// for forward compatibility.
//
// ========== 服务定义 ==========
type GroupCheckServer interface {
	// 获取群组详情
	GetGroup(context.Context, *GetGroupReq) (*GetGroupResp, error)
	// 获取班级详情
	GetClassDetail(context.Context, *GetClassDetailReq) (*GetClassDetailResp, error)
	// 搜索学生
	SearchStudent(context.Context, *SearchStudentReq) (*SearchStudentResp, error)
	// 获取年级-专业-班级层级
	GetGradeClassTree(context.Context, *GetGradeClassTreeReq) (*GetGradeClassTreeResp, error)
	// 获取个人群组列表
	ListPersonGroup(context.Context, *GetPersonalGroupsReq) (*ListPersonGroupResp, error)
	// 获取职位群组列表
	ListJobGroup(context.Context, *GetPositionGroupsReq) (*ListPositionGroupResp, error)
	// 获取班级群组列表
	ListClassGroup(context.Context, *GetClassGroupsReq) (*ListClassGroupResp, error)
	mustEmbedUnimplementedGroupCheckServer()
}

// UnimplementedGroupCheckServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGroupCheckServer struct{}

func (UnimplementedGroupCheckServer) GetGroup(context.Context, *GetGroupReq) (*GetGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedGroupCheckServer) GetClassDetail(context.Context, *GetClassDetailReq) (*GetClassDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassDetail not implemented")
}
func (UnimplementedGroupCheckServer) SearchStudent(context.Context, *SearchStudentReq) (*SearchStudentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchStudent not implemented")
}
func (UnimplementedGroupCheckServer) GetGradeClassTree(context.Context, *GetGradeClassTreeReq) (*GetGradeClassTreeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGradeClassTree not implemented")
}
func (UnimplementedGroupCheckServer) ListPersonGroup(context.Context, *GetPersonalGroupsReq) (*ListPersonGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPersonGroup not implemented")
}
func (UnimplementedGroupCheckServer) ListJobGroup(context.Context, *GetPositionGroupsReq) (*ListPositionGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobGroup not implemented")
}
func (UnimplementedGroupCheckServer) ListClassGroup(context.Context, *GetClassGroupsReq) (*ListClassGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClassGroup not implemented")
}
func (UnimplementedGroupCheckServer) mustEmbedUnimplementedGroupCheckServer() {}
func (UnimplementedGroupCheckServer) testEmbeddedByValue()                    {}

// UnsafeGroupCheckServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupCheckServer will
// result in compilation errors.
type UnsafeGroupCheckServer interface {
	mustEmbedUnimplementedGroupCheckServer()
}

func RegisterGroupCheckServer(s grpc.ServiceRegistrar, srv GroupCheckServer) {
	// If the following call pancis, it indicates UnimplementedGroupCheckServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GroupCheck_ServiceDesc, srv)
}

func _GroupCheck_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCheckServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupCheck_GetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCheckServer).GetGroup(ctx, req.(*GetGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupCheck_GetClassDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClassDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCheckServer).GetClassDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupCheck_GetClassDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCheckServer).GetClassDetail(ctx, req.(*GetClassDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupCheck_SearchStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchStudentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCheckServer).SearchStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupCheck_SearchStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCheckServer).SearchStudent(ctx, req.(*SearchStudentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupCheck_GetGradeClassTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGradeClassTreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCheckServer).GetGradeClassTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupCheck_GetGradeClassTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCheckServer).GetGradeClassTree(ctx, req.(*GetGradeClassTreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupCheck_ListPersonGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonalGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCheckServer).ListPersonGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupCheck_ListPersonGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCheckServer).ListPersonGroup(ctx, req.(*GetPersonalGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupCheck_ListJobGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPositionGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCheckServer).ListJobGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupCheck_ListJobGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCheckServer).ListJobGroup(ctx, req.(*GetPositionGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupCheck_ListClassGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClassGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCheckServer).ListClassGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupCheck_ListClassGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCheckServer).ListClassGroup(ctx, req.(*GetClassGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupCheck_ServiceDesc is the grpc.ServiceDesc for GroupCheck service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupCheck_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GroupCheck.GroupCheck",
	HandlerType: (*GroupCheckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGroup",
			Handler:    _GroupCheck_GetGroup_Handler,
		},
		{
			MethodName: "GetClassDetail",
			Handler:    _GroupCheck_GetClassDetail_Handler,
		},
		{
			MethodName: "SearchStudent",
			Handler:    _GroupCheck_SearchStudent_Handler,
		},
		{
			MethodName: "GetGradeClassTree",
			Handler:    _GroupCheck_GetGradeClassTree_Handler,
		},
		{
			MethodName: "ListPersonGroup",
			Handler:    _GroupCheck_ListPersonGroup_Handler,
		},
		{
			MethodName: "ListJobGroup",
			Handler:    _GroupCheck_ListJobGroup_Handler,
		},
		{
			MethodName: "ListClassGroup",
			Handler:    _GroupCheck_ListClassGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/groupCheck/v1/group_check.proto",
}
