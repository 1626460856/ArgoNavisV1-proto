// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: api/groupManage/v1/group_manage.proto

package groupManage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GroupManage_DeleteGroup_FullMethodName = "/GroupManage.GroupManage/DeleteGroup"
	GroupManage_CreateGroup_FullMethodName = "/GroupManage.GroupManage/CreateGroup"
	GroupManage_UpdateGroup_FullMethodName = "/GroupManage.GroupManage/UpdateGroup"
)

// GroupManageClient is the client API for GroupManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupManageClient interface {
	// 删除群组
	DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*CommonResp, error)
	// 新建群组
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CommonResp, error)
	// 修改群组
	UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type groupManageClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupManageClient(cc grpc.ClientConnInterface) GroupManageClient {
	return &groupManageClient{cc}
}

func (c *groupManageClient) DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*CommonResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, GroupManage_DeleteGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupManageClient) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CommonResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, GroupManage_CreateGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupManageClient) UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*CommonResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, GroupManage_UpdateGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupManageServer is the server API for GroupManage service.
// All implementations must embed UnimplementedGroupManageServer
// for forward compatibility.
type GroupManageServer interface {
	// 删除群组
	DeleteGroup(context.Context, *DeleteGroupReq) (*CommonResp, error)
	// 新建群组
	CreateGroup(context.Context, *CreateGroupReq) (*CommonResp, error)
	// 修改群组
	UpdateGroup(context.Context, *UpdateGroupReq) (*CommonResp, error)
	mustEmbedUnimplementedGroupManageServer()
}

// UnimplementedGroupManageServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGroupManageServer struct{}

func (UnimplementedGroupManageServer) DeleteGroup(context.Context, *DeleteGroupReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedGroupManageServer) CreateGroup(context.Context, *CreateGroupReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedGroupManageServer) UpdateGroup(context.Context, *UpdateGroupReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedGroupManageServer) mustEmbedUnimplementedGroupManageServer() {}
func (UnimplementedGroupManageServer) testEmbeddedByValue()                     {}

// UnsafeGroupManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupManageServer will
// result in compilation errors.
type UnsafeGroupManageServer interface {
	mustEmbedUnimplementedGroupManageServer()
}

func RegisterGroupManageServer(s grpc.ServiceRegistrar, srv GroupManageServer) {
	// If the following call pancis, it indicates UnimplementedGroupManageServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GroupManage_ServiceDesc, srv)
}

func _GroupManage_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManageServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupManage_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManageServer).DeleteGroup(ctx, req.(*DeleteGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupManage_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManageServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupManage_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManageServer).CreateGroup(ctx, req.(*CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupManage_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManageServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupManage_UpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManageServer).UpdateGroup(ctx, req.(*UpdateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupManage_ServiceDesc is the grpc.ServiceDesc for GroupManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GroupManage.GroupManage",
	HandlerType: (*GroupManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteGroup",
			Handler:    _GroupManage_DeleteGroup_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _GroupManage_CreateGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _GroupManage_UpdateGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/groupManage/v1/group_manage.proto",
}
