// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: api/receipt/v1/receipt.proto

package receipt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Receipt_GetReceiptStyle_FullMethodName       = "/Receipt.Receipt/GetReceiptStyle"
	Receipt_GetReceiptList_FullMethodName        = "/Receipt.Receipt/GetReceiptList"
	Receipt_GetReceiptDownloadUrl_FullMethodName = "/Receipt.Receipt/GetReceiptDownloadUrl"
	Receipt_GetReceiptWriteSingle_FullMethodName = "/Receipt.Receipt/GetReceiptWriteSingle"
	Receipt_CreateStyle_FullMethodName           = "/Receipt.Receipt/CreateStyle"
	Receipt_CreateReply_FullMethodName           = "/Receipt.Receipt/CreateReply"
	Receipt_ChangeReceiptReply_FullMethodName    = "/Receipt.Receipt/ChangeReceiptReply"
)

// ReceiptClient is the client API for Receipt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// =========================
// 创建收集表格式接口定义
// =========================
type ReceiptClient interface {
	GetReceiptStyle(ctx context.Context, in *GetReceiptStyleReq, opts ...grpc.CallOption) (*GetReceiptStyleResp, error)
	GetReceiptList(ctx context.Context, in *GetReceiptListReq, opts ...grpc.CallOption) (*GetReceiptListResp, error)
	GetReceiptDownloadUrl(ctx context.Context, in *GetReceiptDownloadUrlReq, opts ...grpc.CallOption) (*GetReceiptDownloadUrlResp, error)
	GetReceiptWriteSingle(ctx context.Context, in *GetReceiptWriteSingleReq, opts ...grpc.CallOption) (*GetReceiptWriteSingleResp, error)
	CreateStyle(ctx context.Context, in *CreateStyleReq, opts ...grpc.CallOption) (*CreateStyleResp, error)
	CreateReply(ctx context.Context, in *CreateReplyReq, opts ...grpc.CallOption) (*CreateReplyResp, error)
	ChangeReceiptReply(ctx context.Context, in *ChangeReceiptReplyReq, opts ...grpc.CallOption) (*ChangeReceiptReplyResp, error)
}

type receiptClient struct {
	cc grpc.ClientConnInterface
}

func NewReceiptClient(cc grpc.ClientConnInterface) ReceiptClient {
	return &receiptClient{cc}
}

func (c *receiptClient) GetReceiptStyle(ctx context.Context, in *GetReceiptStyleReq, opts ...grpc.CallOption) (*GetReceiptStyleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReceiptStyleResp)
	err := c.cc.Invoke(ctx, Receipt_GetReceiptStyle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptClient) GetReceiptList(ctx context.Context, in *GetReceiptListReq, opts ...grpc.CallOption) (*GetReceiptListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReceiptListResp)
	err := c.cc.Invoke(ctx, Receipt_GetReceiptList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptClient) GetReceiptDownloadUrl(ctx context.Context, in *GetReceiptDownloadUrlReq, opts ...grpc.CallOption) (*GetReceiptDownloadUrlResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReceiptDownloadUrlResp)
	err := c.cc.Invoke(ctx, Receipt_GetReceiptDownloadUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptClient) GetReceiptWriteSingle(ctx context.Context, in *GetReceiptWriteSingleReq, opts ...grpc.CallOption) (*GetReceiptWriteSingleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReceiptWriteSingleResp)
	err := c.cc.Invoke(ctx, Receipt_GetReceiptWriteSingle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptClient) CreateStyle(ctx context.Context, in *CreateStyleReq, opts ...grpc.CallOption) (*CreateStyleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStyleResp)
	err := c.cc.Invoke(ctx, Receipt_CreateStyle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptClient) CreateReply(ctx context.Context, in *CreateReplyReq, opts ...grpc.CallOption) (*CreateReplyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateReplyResp)
	err := c.cc.Invoke(ctx, Receipt_CreateReply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptClient) ChangeReceiptReply(ctx context.Context, in *ChangeReceiptReplyReq, opts ...grpc.CallOption) (*ChangeReceiptReplyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeReceiptReplyResp)
	err := c.cc.Invoke(ctx, Receipt_ChangeReceiptReply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReceiptServer is the server API for Receipt service.
// All implementations must embed UnimplementedReceiptServer
// for forward compatibility.
//
// =========================
// 创建收集表格式接口定义
// =========================
type ReceiptServer interface {
	GetReceiptStyle(context.Context, *GetReceiptStyleReq) (*GetReceiptStyleResp, error)
	GetReceiptList(context.Context, *GetReceiptListReq) (*GetReceiptListResp, error)
	GetReceiptDownloadUrl(context.Context, *GetReceiptDownloadUrlReq) (*GetReceiptDownloadUrlResp, error)
	GetReceiptWriteSingle(context.Context, *GetReceiptWriteSingleReq) (*GetReceiptWriteSingleResp, error)
	CreateStyle(context.Context, *CreateStyleReq) (*CreateStyleResp, error)
	CreateReply(context.Context, *CreateReplyReq) (*CreateReplyResp, error)
	ChangeReceiptReply(context.Context, *ChangeReceiptReplyReq) (*ChangeReceiptReplyResp, error)
	mustEmbedUnimplementedReceiptServer()
}

// UnimplementedReceiptServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReceiptServer struct{}

func (UnimplementedReceiptServer) GetReceiptStyle(context.Context, *GetReceiptStyleReq) (*GetReceiptStyleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceiptStyle not implemented")
}
func (UnimplementedReceiptServer) GetReceiptList(context.Context, *GetReceiptListReq) (*GetReceiptListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceiptList not implemented")
}
func (UnimplementedReceiptServer) GetReceiptDownloadUrl(context.Context, *GetReceiptDownloadUrlReq) (*GetReceiptDownloadUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceiptDownloadUrl not implemented")
}
func (UnimplementedReceiptServer) GetReceiptWriteSingle(context.Context, *GetReceiptWriteSingleReq) (*GetReceiptWriteSingleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceiptWriteSingle not implemented")
}
func (UnimplementedReceiptServer) CreateStyle(context.Context, *CreateStyleReq) (*CreateStyleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStyle not implemented")
}
func (UnimplementedReceiptServer) CreateReply(context.Context, *CreateReplyReq) (*CreateReplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReply not implemented")
}
func (UnimplementedReceiptServer) ChangeReceiptReply(context.Context, *ChangeReceiptReplyReq) (*ChangeReceiptReplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeReceiptReply not implemented")
}
func (UnimplementedReceiptServer) mustEmbedUnimplementedReceiptServer() {}
func (UnimplementedReceiptServer) testEmbeddedByValue()                 {}

// UnsafeReceiptServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReceiptServer will
// result in compilation errors.
type UnsafeReceiptServer interface {
	mustEmbedUnimplementedReceiptServer()
}

func RegisterReceiptServer(s grpc.ServiceRegistrar, srv ReceiptServer) {
	// If the following call pancis, it indicates UnimplementedReceiptServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Receipt_ServiceDesc, srv)
}

func _Receipt_GetReceiptStyle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceiptStyleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServer).GetReceiptStyle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Receipt_GetReceiptStyle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServer).GetReceiptStyle(ctx, req.(*GetReceiptStyleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Receipt_GetReceiptList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceiptListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServer).GetReceiptList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Receipt_GetReceiptList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServer).GetReceiptList(ctx, req.(*GetReceiptListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Receipt_GetReceiptDownloadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceiptDownloadUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServer).GetReceiptDownloadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Receipt_GetReceiptDownloadUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServer).GetReceiptDownloadUrl(ctx, req.(*GetReceiptDownloadUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Receipt_GetReceiptWriteSingle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceiptWriteSingleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServer).GetReceiptWriteSingle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Receipt_GetReceiptWriteSingle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServer).GetReceiptWriteSingle(ctx, req.(*GetReceiptWriteSingleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Receipt_CreateStyle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStyleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServer).CreateStyle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Receipt_CreateStyle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServer).CreateStyle(ctx, req.(*CreateStyleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Receipt_CreateReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServer).CreateReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Receipt_CreateReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServer).CreateReply(ctx, req.(*CreateReplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Receipt_ChangeReceiptReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeReceiptReplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServer).ChangeReceiptReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Receipt_ChangeReceiptReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServer).ChangeReceiptReply(ctx, req.(*ChangeReceiptReplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Receipt_ServiceDesc is the grpc.ServiceDesc for Receipt service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Receipt_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Receipt.Receipt",
	HandlerType: (*ReceiptServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReceiptStyle",
			Handler:    _Receipt_GetReceiptStyle_Handler,
		},
		{
			MethodName: "GetReceiptList",
			Handler:    _Receipt_GetReceiptList_Handler,
		},
		{
			MethodName: "GetReceiptDownloadUrl",
			Handler:    _Receipt_GetReceiptDownloadUrl_Handler,
		},
		{
			MethodName: "GetReceiptWriteSingle",
			Handler:    _Receipt_GetReceiptWriteSingle_Handler,
		},
		{
			MethodName: "CreateStyle",
			Handler:    _Receipt_CreateStyle_Handler,
		},
		{
			MethodName: "CreateReply",
			Handler:    _Receipt_CreateReply_Handler,
		},
		{
			MethodName: "ChangeReceiptReply",
			Handler:    _Receipt_ChangeReceiptReply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/receipt/v1/receipt.proto",
}
