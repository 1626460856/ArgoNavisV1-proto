// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.31.1
// source: api/receipt/v1/receiptWrite.proto

package receiptWrite

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationReceiptChangeReceiptReply = "/Receipt.Receipt/ChangeReceiptReply"
const OperationReceiptCreateReply = "/Receipt.Receipt/CreateReply"
const OperationReceiptCreateStyle = "/Receipt.Receipt/CreateStyle"

type ReceiptHTTPServer interface {
	ChangeReceiptReply(context.Context, *ChangeReceiptReplyReq) (*ChangeReceiptReplyResp, error)
	CreateReply(context.Context, *CreateReplyReq) (*CreateReplyResp, error)
	CreateStyle(context.Context, *CreateStyleReq) (*CreateStyleResp, error)
}

func RegisterReceiptHTTPServer(s *http.Server, srv ReceiptHTTPServer) {
	r := s.Route("/")
	r.POST("/receipt/write/create/style", _Receipt_CreateStyle0_HTTP_Handler(srv))
	r.POST("/receipt/write/student/reply", _Receipt_CreateReply0_HTTP_Handler(srv))
	r.POST("/receipt/write/change/reply", _Receipt_ChangeReceiptReply0_HTTP_Handler(srv))
}

func _Receipt_CreateStyle0_HTTP_Handler(srv ReceiptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateStyleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationReceiptCreateStyle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateStyle(ctx, req.(*CreateStyleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateStyleResp)
		return ctx.Result(200, reply)
	}
}

func _Receipt_CreateReply0_HTTP_Handler(srv ReceiptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateReplyReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationReceiptCreateReply)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateReply(ctx, req.(*CreateReplyReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateReplyResp)
		return ctx.Result(200, reply)
	}
}

func _Receipt_ChangeReceiptReply0_HTTP_Handler(srv ReceiptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ChangeReceiptReplyReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationReceiptChangeReceiptReply)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ChangeReceiptReply(ctx, req.(*ChangeReceiptReplyReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ChangeReceiptReplyResp)
		return ctx.Result(200, reply)
	}
}

type ReceiptHTTPClient interface {
	ChangeReceiptReply(ctx context.Context, req *ChangeReceiptReplyReq, opts ...http.CallOption) (rsp *ChangeReceiptReplyResp, err error)
	CreateReply(ctx context.Context, req *CreateReplyReq, opts ...http.CallOption) (rsp *CreateReplyResp, err error)
	CreateStyle(ctx context.Context, req *CreateStyleReq, opts ...http.CallOption) (rsp *CreateStyleResp, err error)
}

type ReceiptHTTPClientImpl struct {
	cc *http.Client
}

func NewReceiptHTTPClient(client *http.Client) ReceiptHTTPClient {
	return &ReceiptHTTPClientImpl{client}
}

func (c *ReceiptHTTPClientImpl) ChangeReceiptReply(ctx context.Context, in *ChangeReceiptReplyReq, opts ...http.CallOption) (*ChangeReceiptReplyResp, error) {
	var out ChangeReceiptReplyResp
	pattern := "/receipt/write/change/reply"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationReceiptChangeReceiptReply))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ReceiptHTTPClientImpl) CreateReply(ctx context.Context, in *CreateReplyReq, opts ...http.CallOption) (*CreateReplyResp, error) {
	var out CreateReplyResp
	pattern := "/receipt/write/student/reply"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationReceiptCreateReply))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ReceiptHTTPClientImpl) CreateStyle(ctx context.Context, in *CreateStyleReq, opts ...http.CallOption) (*CreateStyleResp, error) {
	var out CreateStyleResp
	pattern := "/receipt/write/create/style"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationReceiptCreateStyle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
