// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.31.1
// source: api/check/v1/check.proto

package check

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationStuCheckGetArchivedNoticeList = "/check.StuCheck/GetArchivedNoticeList"
const OperationStuCheckGetNotice = "/check.StuCheck/GetNotice"
const OperationStuCheckGetNoticeDetails = "/check.StuCheck/GetNoticeDetails"
const OperationStuCheckGetPublishedNoticeList = "/check.StuCheck/GetPublishedNoticeList"
const OperationStuCheckGetUnfinishedNotice = "/check.StuCheck/GetUnfinishedNotice"
const OperationStuCheckGetUnfinishedNoticeList = "/check.StuCheck/GetUnfinishedNoticeList"
const OperationStuCheckSearchNotice = "/check.StuCheck/SearchNotice"
const OperationStuCheckTeacherSearchNotice = "/check.StuCheck/TeacherSearchNotice"

type StuCheckHTTPServer interface {
	// GetArchivedNoticeList 获取已归档通知列表
	GetArchivedNoticeList(context.Context, *GetArchivedNoticeListReq) (*GetArchivedNoticeListResp, error)
	// GetNotice 获取已完成通知详情
	GetNotice(context.Context, *GetfinishNoticeReq) (*GetfinishNoticeResp, error)
	// GetNoticeDetails 获取单条通知详情
	GetNoticeDetails(context.Context, *GetNoticeDetailsReq) (*GetNoticeDetailsResp, error)
	// GetPublishedNoticeList 查询已发布通知列表
	GetPublishedNoticeList(context.Context, *GetPublishedNoticeListReq) (*GetPublishedNoticeListResp, error)
	// GetUnfinishedNotice 获取未完成通知详情
	GetUnfinishedNotice(context.Context, *GetUnfinishedNoticeReq) (*GetUnfinishedNoticeResp, error)
	// GetUnfinishedNoticeList 获取未完成通知列表
	GetUnfinishedNoticeList(context.Context, *GetUnfinishedNoticeListReq) (*GetUnfinishedNoticeListResp, error)
	// SearchNotice 搜索通知
	SearchNotice(context.Context, *SearchNoticeReq) (*SearchNoticeResp, error)
	// TeacherSearchNotice 教师端搜索通知
	TeacherSearchNotice(context.Context, *TeacherSearchNoticeReq) (*TeacherSearchNoticeResp, error)
}

func RegisterStuCheckHTTPServer(s *http.Server, srv StuCheckHTTPServer) {
	r := s.Route("/")
	r.GET("/student/noitce/finifsh/details/{notice_id}", _StuCheck_GetNotice0_HTTP_Handler(srv))
	r.GET("/student/notice/unfinish/details/{notice_id}", _StuCheck_GetUnfinishedNotice0_HTTP_Handler(srv))
	r.GET("/student/search/notice", _StuCheck_SearchNotice0_HTTP_Handler(srv))
	r.GET("/student/notice/finfish/list", _StuCheck_GetArchivedNoticeList0_HTTP_Handler(srv))
	r.GET("/student/notice/unfinish/list", _StuCheck_GetUnfinishedNoticeList0_HTTP_Handler(srv))
	r.GET("/teacher/notice/details/{notice_id}", _StuCheck_GetNoticeDetails0_HTTP_Handler(srv))
	r.GET("/teacher/search/notice", _StuCheck_TeacherSearchNotice0_HTTP_Handler(srv))
	r.GET("/teacher/search/notice/list", _StuCheck_GetPublishedNoticeList0_HTTP_Handler(srv))
}

func _StuCheck_GetNotice0_HTTP_Handler(srv StuCheckHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetfinishNoticeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStuCheckGetNotice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNotice(ctx, req.(*GetfinishNoticeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetfinishNoticeResp)
		return ctx.Result(200, reply)
	}
}

func _StuCheck_GetUnfinishedNotice0_HTTP_Handler(srv StuCheckHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUnfinishedNoticeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStuCheckGetUnfinishedNotice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUnfinishedNotice(ctx, req.(*GetUnfinishedNoticeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUnfinishedNoticeResp)
		return ctx.Result(200, reply)
	}
}

func _StuCheck_SearchNotice0_HTTP_Handler(srv StuCheckHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchNoticeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStuCheckSearchNotice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchNotice(ctx, req.(*SearchNoticeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchNoticeResp)
		return ctx.Result(200, reply)
	}
}

func _StuCheck_GetArchivedNoticeList0_HTTP_Handler(srv StuCheckHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetArchivedNoticeListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStuCheckGetArchivedNoticeList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArchivedNoticeList(ctx, req.(*GetArchivedNoticeListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArchivedNoticeListResp)
		return ctx.Result(200, reply)
	}
}

func _StuCheck_GetUnfinishedNoticeList0_HTTP_Handler(srv StuCheckHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUnfinishedNoticeListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStuCheckGetUnfinishedNoticeList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUnfinishedNoticeList(ctx, req.(*GetUnfinishedNoticeListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUnfinishedNoticeListResp)
		return ctx.Result(200, reply)
	}
}

func _StuCheck_GetNoticeDetails0_HTTP_Handler(srv StuCheckHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetNoticeDetailsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStuCheckGetNoticeDetails)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNoticeDetails(ctx, req.(*GetNoticeDetailsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetNoticeDetailsResp)
		return ctx.Result(200, reply)
	}
}

func _StuCheck_TeacherSearchNotice0_HTTP_Handler(srv StuCheckHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TeacherSearchNoticeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStuCheckTeacherSearchNotice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TeacherSearchNotice(ctx, req.(*TeacherSearchNoticeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TeacherSearchNoticeResp)
		return ctx.Result(200, reply)
	}
}

func _StuCheck_GetPublishedNoticeList0_HTTP_Handler(srv StuCheckHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPublishedNoticeListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStuCheckGetPublishedNoticeList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPublishedNoticeList(ctx, req.(*GetPublishedNoticeListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPublishedNoticeListResp)
		return ctx.Result(200, reply)
	}
}

type StuCheckHTTPClient interface {
	GetArchivedNoticeList(ctx context.Context, req *GetArchivedNoticeListReq, opts ...http.CallOption) (rsp *GetArchivedNoticeListResp, err error)
	GetNotice(ctx context.Context, req *GetfinishNoticeReq, opts ...http.CallOption) (rsp *GetfinishNoticeResp, err error)
	GetNoticeDetails(ctx context.Context, req *GetNoticeDetailsReq, opts ...http.CallOption) (rsp *GetNoticeDetailsResp, err error)
	GetPublishedNoticeList(ctx context.Context, req *GetPublishedNoticeListReq, opts ...http.CallOption) (rsp *GetPublishedNoticeListResp, err error)
	GetUnfinishedNotice(ctx context.Context, req *GetUnfinishedNoticeReq, opts ...http.CallOption) (rsp *GetUnfinishedNoticeResp, err error)
	GetUnfinishedNoticeList(ctx context.Context, req *GetUnfinishedNoticeListReq, opts ...http.CallOption) (rsp *GetUnfinishedNoticeListResp, err error)
	SearchNotice(ctx context.Context, req *SearchNoticeReq, opts ...http.CallOption) (rsp *SearchNoticeResp, err error)
	TeacherSearchNotice(ctx context.Context, req *TeacherSearchNoticeReq, opts ...http.CallOption) (rsp *TeacherSearchNoticeResp, err error)
}

type StuCheckHTTPClientImpl struct {
	cc *http.Client
}

func NewStuCheckHTTPClient(client *http.Client) StuCheckHTTPClient {
	return &StuCheckHTTPClientImpl{client}
}

func (c *StuCheckHTTPClientImpl) GetArchivedNoticeList(ctx context.Context, in *GetArchivedNoticeListReq, opts ...http.CallOption) (*GetArchivedNoticeListResp, error) {
	var out GetArchivedNoticeListResp
	pattern := "/student/notice/finfish/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStuCheckGetArchivedNoticeList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StuCheckHTTPClientImpl) GetNotice(ctx context.Context, in *GetfinishNoticeReq, opts ...http.CallOption) (*GetfinishNoticeResp, error) {
	var out GetfinishNoticeResp
	pattern := "/student/noitce/finifsh/details/{notice_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStuCheckGetNotice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StuCheckHTTPClientImpl) GetNoticeDetails(ctx context.Context, in *GetNoticeDetailsReq, opts ...http.CallOption) (*GetNoticeDetailsResp, error) {
	var out GetNoticeDetailsResp
	pattern := "/teacher/notice/details/{notice_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStuCheckGetNoticeDetails))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StuCheckHTTPClientImpl) GetPublishedNoticeList(ctx context.Context, in *GetPublishedNoticeListReq, opts ...http.CallOption) (*GetPublishedNoticeListResp, error) {
	var out GetPublishedNoticeListResp
	pattern := "/teacher/search/notice/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStuCheckGetPublishedNoticeList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StuCheckHTTPClientImpl) GetUnfinishedNotice(ctx context.Context, in *GetUnfinishedNoticeReq, opts ...http.CallOption) (*GetUnfinishedNoticeResp, error) {
	var out GetUnfinishedNoticeResp
	pattern := "/student/notice/unfinish/details/{notice_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStuCheckGetUnfinishedNotice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StuCheckHTTPClientImpl) GetUnfinishedNoticeList(ctx context.Context, in *GetUnfinishedNoticeListReq, opts ...http.CallOption) (*GetUnfinishedNoticeListResp, error) {
	var out GetUnfinishedNoticeListResp
	pattern := "/student/notice/unfinish/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStuCheckGetUnfinishedNoticeList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StuCheckHTTPClientImpl) SearchNotice(ctx context.Context, in *SearchNoticeReq, opts ...http.CallOption) (*SearchNoticeResp, error) {
	var out SearchNoticeResp
	pattern := "/student/search/notice"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStuCheckSearchNotice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StuCheckHTTPClientImpl) TeacherSearchNotice(ctx context.Context, in *TeacherSearchNoticeReq, opts ...http.CallOption) (*TeacherSearchNoticeResp, error) {
	var out TeacherSearchNoticeResp
	pattern := "/teacher/search/notice"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStuCheckTeacherSearchNotice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
