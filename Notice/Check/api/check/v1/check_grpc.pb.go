// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: api/check/v1/check.proto

package check

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StuCheck_GetNotice_FullMethodName               = "/check.StuCheck/GetNotice"
	StuCheck_GetUnfinishedNotice_FullMethodName     = "/check.StuCheck/GetUnfinishedNotice"
	StuCheck_SearchNotice_FullMethodName            = "/check.StuCheck/SearchNotice"
	StuCheck_GetArchivedNoticeList_FullMethodName   = "/check.StuCheck/GetArchivedNoticeList"
	StuCheck_GetUnfinishedNoticeList_FullMethodName = "/check.StuCheck/GetUnfinishedNoticeList"
	StuCheck_GetNoticeDetails_FullMethodName        = "/check.StuCheck/GetNoticeDetails"
	StuCheck_TeacherSearchNotice_FullMethodName     = "/check.StuCheck/TeacherSearchNotice"
	StuCheck_GetPublishedNoticeList_FullMethodName  = "/check.StuCheck/GetPublishedNoticeList"
)

// StuCheckClient is the client API for StuCheck service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 学生端通知服务定义
type StuCheckClient interface {
	// 获取已完成通知详情
	GetNotice(ctx context.Context, in *GetfinishNoticeReq, opts ...grpc.CallOption) (*GetfinishNoticeResp, error)
	// 获取未完成通知详情
	GetUnfinishedNotice(ctx context.Context, in *GetUnfinishedNoticeReq, opts ...grpc.CallOption) (*GetUnfinishedNoticeResp, error)
	// 搜索通知
	SearchNotice(ctx context.Context, in *SearchNoticeReq, opts ...grpc.CallOption) (*SearchNoticeResp, error)
	// 获取已归档通知列表
	GetArchivedNoticeList(ctx context.Context, in *GetArchivedNoticeListReq, opts ...grpc.CallOption) (*GetArchivedNoticeListResp, error)
	// 获取未完成通知列表
	GetUnfinishedNoticeList(ctx context.Context, in *GetUnfinishedNoticeListReq, opts ...grpc.CallOption) (*GetUnfinishedNoticeListResp, error)
	// 获取单条通知详情
	GetNoticeDetails(ctx context.Context, in *GetNoticeDetailsReq, opts ...grpc.CallOption) (*GetNoticeDetailsResp, error)
	// 教师端搜索通知
	TeacherSearchNotice(ctx context.Context, in *TeacherSearchNoticeReq, opts ...grpc.CallOption) (*TeacherSearchNoticeResp, error)
	// 查询已发布通知列表
	GetPublishedNoticeList(ctx context.Context, in *GetPublishedNoticeListReq, opts ...grpc.CallOption) (*GetPublishedNoticeListResp, error)
}

type stuCheckClient struct {
	cc grpc.ClientConnInterface
}

func NewStuCheckClient(cc grpc.ClientConnInterface) StuCheckClient {
	return &stuCheckClient{cc}
}

func (c *stuCheckClient) GetNotice(ctx context.Context, in *GetfinishNoticeReq, opts ...grpc.CallOption) (*GetfinishNoticeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetfinishNoticeResp)
	err := c.cc.Invoke(ctx, StuCheck_GetNotice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stuCheckClient) GetUnfinishedNotice(ctx context.Context, in *GetUnfinishedNoticeReq, opts ...grpc.CallOption) (*GetUnfinishedNoticeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUnfinishedNoticeResp)
	err := c.cc.Invoke(ctx, StuCheck_GetUnfinishedNotice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stuCheckClient) SearchNotice(ctx context.Context, in *SearchNoticeReq, opts ...grpc.CallOption) (*SearchNoticeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchNoticeResp)
	err := c.cc.Invoke(ctx, StuCheck_SearchNotice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stuCheckClient) GetArchivedNoticeList(ctx context.Context, in *GetArchivedNoticeListReq, opts ...grpc.CallOption) (*GetArchivedNoticeListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetArchivedNoticeListResp)
	err := c.cc.Invoke(ctx, StuCheck_GetArchivedNoticeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stuCheckClient) GetUnfinishedNoticeList(ctx context.Context, in *GetUnfinishedNoticeListReq, opts ...grpc.CallOption) (*GetUnfinishedNoticeListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUnfinishedNoticeListResp)
	err := c.cc.Invoke(ctx, StuCheck_GetUnfinishedNoticeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stuCheckClient) GetNoticeDetails(ctx context.Context, in *GetNoticeDetailsReq, opts ...grpc.CallOption) (*GetNoticeDetailsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNoticeDetailsResp)
	err := c.cc.Invoke(ctx, StuCheck_GetNoticeDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stuCheckClient) TeacherSearchNotice(ctx context.Context, in *TeacherSearchNoticeReq, opts ...grpc.CallOption) (*TeacherSearchNoticeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TeacherSearchNoticeResp)
	err := c.cc.Invoke(ctx, StuCheck_TeacherSearchNotice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stuCheckClient) GetPublishedNoticeList(ctx context.Context, in *GetPublishedNoticeListReq, opts ...grpc.CallOption) (*GetPublishedNoticeListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPublishedNoticeListResp)
	err := c.cc.Invoke(ctx, StuCheck_GetPublishedNoticeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StuCheckServer is the server API for StuCheck service.
// All implementations must embed UnimplementedStuCheckServer
// for forward compatibility.
//
// 学生端通知服务定义
type StuCheckServer interface {
	// 获取已完成通知详情
	GetNotice(context.Context, *GetfinishNoticeReq) (*GetfinishNoticeResp, error)
	// 获取未完成通知详情
	GetUnfinishedNotice(context.Context, *GetUnfinishedNoticeReq) (*GetUnfinishedNoticeResp, error)
	// 搜索通知
	SearchNotice(context.Context, *SearchNoticeReq) (*SearchNoticeResp, error)
	// 获取已归档通知列表
	GetArchivedNoticeList(context.Context, *GetArchivedNoticeListReq) (*GetArchivedNoticeListResp, error)
	// 获取未完成通知列表
	GetUnfinishedNoticeList(context.Context, *GetUnfinishedNoticeListReq) (*GetUnfinishedNoticeListResp, error)
	// 获取单条通知详情
	GetNoticeDetails(context.Context, *GetNoticeDetailsReq) (*GetNoticeDetailsResp, error)
	// 教师端搜索通知
	TeacherSearchNotice(context.Context, *TeacherSearchNoticeReq) (*TeacherSearchNoticeResp, error)
	// 查询已发布通知列表
	GetPublishedNoticeList(context.Context, *GetPublishedNoticeListReq) (*GetPublishedNoticeListResp, error)
	mustEmbedUnimplementedStuCheckServer()
}

// UnimplementedStuCheckServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStuCheckServer struct{}

func (UnimplementedStuCheckServer) GetNotice(context.Context, *GetfinishNoticeReq) (*GetfinishNoticeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotice not implemented")
}
func (UnimplementedStuCheckServer) GetUnfinishedNotice(context.Context, *GetUnfinishedNoticeReq) (*GetUnfinishedNoticeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnfinishedNotice not implemented")
}
func (UnimplementedStuCheckServer) SearchNotice(context.Context, *SearchNoticeReq) (*SearchNoticeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchNotice not implemented")
}
func (UnimplementedStuCheckServer) GetArchivedNoticeList(context.Context, *GetArchivedNoticeListReq) (*GetArchivedNoticeListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArchivedNoticeList not implemented")
}
func (UnimplementedStuCheckServer) GetUnfinishedNoticeList(context.Context, *GetUnfinishedNoticeListReq) (*GetUnfinishedNoticeListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnfinishedNoticeList not implemented")
}
func (UnimplementedStuCheckServer) GetNoticeDetails(context.Context, *GetNoticeDetailsReq) (*GetNoticeDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNoticeDetails not implemented")
}
func (UnimplementedStuCheckServer) TeacherSearchNotice(context.Context, *TeacherSearchNoticeReq) (*TeacherSearchNoticeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherSearchNotice not implemented")
}
func (UnimplementedStuCheckServer) GetPublishedNoticeList(context.Context, *GetPublishedNoticeListReq) (*GetPublishedNoticeListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublishedNoticeList not implemented")
}
func (UnimplementedStuCheckServer) mustEmbedUnimplementedStuCheckServer() {}
func (UnimplementedStuCheckServer) testEmbeddedByValue()                  {}

// UnsafeStuCheckServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StuCheckServer will
// result in compilation errors.
type UnsafeStuCheckServer interface {
	mustEmbedUnimplementedStuCheckServer()
}

func RegisterStuCheckServer(s grpc.ServiceRegistrar, srv StuCheckServer) {
	// If the following call pancis, it indicates UnimplementedStuCheckServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StuCheck_ServiceDesc, srv)
}

func _StuCheck_GetNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetfinishNoticeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StuCheckServer).GetNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StuCheck_GetNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StuCheckServer).GetNotice(ctx, req.(*GetfinishNoticeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StuCheck_GetUnfinishedNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnfinishedNoticeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StuCheckServer).GetUnfinishedNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StuCheck_GetUnfinishedNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StuCheckServer).GetUnfinishedNotice(ctx, req.(*GetUnfinishedNoticeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StuCheck_SearchNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchNoticeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StuCheckServer).SearchNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StuCheck_SearchNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StuCheckServer).SearchNotice(ctx, req.(*SearchNoticeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StuCheck_GetArchivedNoticeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArchivedNoticeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StuCheckServer).GetArchivedNoticeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StuCheck_GetArchivedNoticeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StuCheckServer).GetArchivedNoticeList(ctx, req.(*GetArchivedNoticeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StuCheck_GetUnfinishedNoticeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnfinishedNoticeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StuCheckServer).GetUnfinishedNoticeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StuCheck_GetUnfinishedNoticeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StuCheckServer).GetUnfinishedNoticeList(ctx, req.(*GetUnfinishedNoticeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StuCheck_GetNoticeDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNoticeDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StuCheckServer).GetNoticeDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StuCheck_GetNoticeDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StuCheckServer).GetNoticeDetails(ctx, req.(*GetNoticeDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StuCheck_TeacherSearchNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeacherSearchNoticeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StuCheckServer).TeacherSearchNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StuCheck_TeacherSearchNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StuCheckServer).TeacherSearchNotice(ctx, req.(*TeacherSearchNoticeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StuCheck_GetPublishedNoticeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublishedNoticeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StuCheckServer).GetPublishedNoticeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StuCheck_GetPublishedNoticeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StuCheckServer).GetPublishedNoticeList(ctx, req.(*GetPublishedNoticeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// StuCheck_ServiceDesc is the grpc.ServiceDesc for StuCheck service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StuCheck_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "check.StuCheck",
	HandlerType: (*StuCheckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNotice",
			Handler:    _StuCheck_GetNotice_Handler,
		},
		{
			MethodName: "GetUnfinishedNotice",
			Handler:    _StuCheck_GetUnfinishedNotice_Handler,
		},
		{
			MethodName: "SearchNotice",
			Handler:    _StuCheck_SearchNotice_Handler,
		},
		{
			MethodName: "GetArchivedNoticeList",
			Handler:    _StuCheck_GetArchivedNoticeList_Handler,
		},
		{
			MethodName: "GetUnfinishedNoticeList",
			Handler:    _StuCheck_GetUnfinishedNoticeList_Handler,
		},
		{
			MethodName: "GetNoticeDetails",
			Handler:    _StuCheck_GetNoticeDetails_Handler,
		},
		{
			MethodName: "TeacherSearchNotice",
			Handler:    _StuCheck_TeacherSearchNotice_Handler,
		},
		{
			MethodName: "GetPublishedNoticeList",
			Handler:    _StuCheck_GetPublishedNoticeList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/check/v1/check.proto",
}
