// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.31.1
// source: api/TeaNoticeManage/v1/teaNoticeManage.proto

package teaNoticeManage

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTeaManageCallbackReceipt = "/TeaNoticeManage.v1.TeaManage/CallbackReceipt"
const OperationTeaManageDeleteNotice = "/TeaNoticeManage.v1.TeaManage/DeleteNotice"
const OperationTeaManagePublishNotice = "/TeaNoticeManage.v1.TeaManage/PublishNotice"
const OperationTeaManageRemindNotice = "/TeaNoticeManage.v1.TeaManage/RemindNotice"

type TeaManageHTTPServer interface {
	// CallbackReceipt 打回单个学生反馈
	CallbackReceipt(context.Context, *CallbackReceiptReq) (*CallbackReceiptResp, error)
	// DeleteNotice 删除通知
	DeleteNotice(context.Context, *DeleteNoticeReq) (*DeleteNoticeResp, error)
	// PublishNotice 发布通知
	PublishNotice(context.Context, *PublishNoticeReq) (*PublishNoticeResp, error)
	// RemindNotice 一键提醒
	RemindNotice(context.Context, *RemindNoticeReq) (*RemindNoticeResp, error)
}

func RegisterTeaManageHTTPServer(s *http.Server, srv TeaManageHTTPServer) {
	r := s.Route("/")
	r.POST("/teacher/receipt/callback", _TeaManage_CallbackReceipt0_HTTP_Handler(srv))
	r.POST("/teacher/remind/notice", _TeaManage_RemindNotice0_HTTP_Handler(srv))
	r.POST("/teacher/delete/notice", _TeaManage_DeleteNotice0_HTTP_Handler(srv))
	r.POST("/teacher/publish/notice", _TeaManage_PublishNotice0_HTTP_Handler(srv))
}

func _TeaManage_CallbackReceipt0_HTTP_Handler(srv TeaManageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CallbackReceiptReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTeaManageCallbackReceipt)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CallbackReceipt(ctx, req.(*CallbackReceiptReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CallbackReceiptResp)
		return ctx.Result(200, reply)
	}
}

func _TeaManage_RemindNotice0_HTTP_Handler(srv TeaManageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RemindNoticeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTeaManageRemindNotice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RemindNotice(ctx, req.(*RemindNoticeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RemindNoticeResp)
		return ctx.Result(200, reply)
	}
}

func _TeaManage_DeleteNotice0_HTTP_Handler(srv TeaManageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteNoticeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTeaManageDeleteNotice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteNotice(ctx, req.(*DeleteNoticeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteNoticeResp)
		return ctx.Result(200, reply)
	}
}

func _TeaManage_PublishNotice0_HTTP_Handler(srv TeaManageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PublishNoticeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTeaManagePublishNotice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PublishNotice(ctx, req.(*PublishNoticeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PublishNoticeResp)
		return ctx.Result(200, reply)
	}
}

type TeaManageHTTPClient interface {
	CallbackReceipt(ctx context.Context, req *CallbackReceiptReq, opts ...http.CallOption) (rsp *CallbackReceiptResp, err error)
	DeleteNotice(ctx context.Context, req *DeleteNoticeReq, opts ...http.CallOption) (rsp *DeleteNoticeResp, err error)
	PublishNotice(ctx context.Context, req *PublishNoticeReq, opts ...http.CallOption) (rsp *PublishNoticeResp, err error)
	RemindNotice(ctx context.Context, req *RemindNoticeReq, opts ...http.CallOption) (rsp *RemindNoticeResp, err error)
}

type TeaManageHTTPClientImpl struct {
	cc *http.Client
}

func NewTeaManageHTTPClient(client *http.Client) TeaManageHTTPClient {
	return &TeaManageHTTPClientImpl{client}
}

func (c *TeaManageHTTPClientImpl) CallbackReceipt(ctx context.Context, in *CallbackReceiptReq, opts ...http.CallOption) (*CallbackReceiptResp, error) {
	var out CallbackReceiptResp
	pattern := "/teacher/receipt/callback"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTeaManageCallbackReceipt))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TeaManageHTTPClientImpl) DeleteNotice(ctx context.Context, in *DeleteNoticeReq, opts ...http.CallOption) (*DeleteNoticeResp, error) {
	var out DeleteNoticeResp
	pattern := "/teacher/delete/notice"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTeaManageDeleteNotice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TeaManageHTTPClientImpl) PublishNotice(ctx context.Context, in *PublishNoticeReq, opts ...http.CallOption) (*PublishNoticeResp, error) {
	var out PublishNoticeResp
	pattern := "/teacher/publish/notice"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTeaManagePublishNotice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TeaManageHTTPClientImpl) RemindNotice(ctx context.Context, in *RemindNoticeReq, opts ...http.CallOption) (*RemindNoticeResp, error) {
	var out RemindNoticeResp
	pattern := "/teacher/remind/notice"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTeaManageRemindNotice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
