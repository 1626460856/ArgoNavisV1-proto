// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: api/TeaNoticeManage/v1/teaNoticeManage.proto

package teaNoticeManage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TeaManage_CallbackReceipt_FullMethodName = "/TeaNoticeManage.v1.TeaManage/CallbackReceipt"
	TeaManage_RemindNotice_FullMethodName    = "/TeaNoticeManage.v1.TeaManage/RemindNotice"
	TeaManage_DeleteNotice_FullMethodName    = "/TeaNoticeManage.v1.TeaManage/DeleteNotice"
	TeaManage_PublishNotice_FullMethodName   = "/TeaNoticeManage.v1.TeaManage/PublishNotice"
)

// TeaManageClient is the client API for TeaManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 教师端通知管理服务定义
type TeaManageClient interface {
	// 打回单个学生反馈
	CallbackReceipt(ctx context.Context, in *CallbackReceiptReq, opts ...grpc.CallOption) (*CallbackReceiptResp, error)
	// 一键提醒
	RemindNotice(ctx context.Context, in *RemindNoticeReq, opts ...grpc.CallOption) (*RemindNoticeResp, error)
	// 删除通知
	DeleteNotice(ctx context.Context, in *DeleteNoticeReq, opts ...grpc.CallOption) (*DeleteNoticeResp, error)
	// 发布通知
	PublishNotice(ctx context.Context, in *PublishNoticeReq, opts ...grpc.CallOption) (*PublishNoticeResp, error)
}

type teaManageClient struct {
	cc grpc.ClientConnInterface
}

func NewTeaManageClient(cc grpc.ClientConnInterface) TeaManageClient {
	return &teaManageClient{cc}
}

func (c *teaManageClient) CallbackReceipt(ctx context.Context, in *CallbackReceiptReq, opts ...grpc.CallOption) (*CallbackReceiptResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CallbackReceiptResp)
	err := c.cc.Invoke(ctx, TeaManage_CallbackReceipt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teaManageClient) RemindNotice(ctx context.Context, in *RemindNoticeReq, opts ...grpc.CallOption) (*RemindNoticeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemindNoticeResp)
	err := c.cc.Invoke(ctx, TeaManage_RemindNotice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teaManageClient) DeleteNotice(ctx context.Context, in *DeleteNoticeReq, opts ...grpc.CallOption) (*DeleteNoticeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteNoticeResp)
	err := c.cc.Invoke(ctx, TeaManage_DeleteNotice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teaManageClient) PublishNotice(ctx context.Context, in *PublishNoticeReq, opts ...grpc.CallOption) (*PublishNoticeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishNoticeResp)
	err := c.cc.Invoke(ctx, TeaManage_PublishNotice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeaManageServer is the server API for TeaManage service.
// All implementations must embed UnimplementedTeaManageServer
// for forward compatibility.
//
// 教师端通知管理服务定义
type TeaManageServer interface {
	// 打回单个学生反馈
	CallbackReceipt(context.Context, *CallbackReceiptReq) (*CallbackReceiptResp, error)
	// 一键提醒
	RemindNotice(context.Context, *RemindNoticeReq) (*RemindNoticeResp, error)
	// 删除通知
	DeleteNotice(context.Context, *DeleteNoticeReq) (*DeleteNoticeResp, error)
	// 发布通知
	PublishNotice(context.Context, *PublishNoticeReq) (*PublishNoticeResp, error)
	mustEmbedUnimplementedTeaManageServer()
}

// UnimplementedTeaManageServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTeaManageServer struct{}

func (UnimplementedTeaManageServer) CallbackReceipt(context.Context, *CallbackReceiptReq) (*CallbackReceiptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallbackReceipt not implemented")
}
func (UnimplementedTeaManageServer) RemindNotice(context.Context, *RemindNoticeReq) (*RemindNoticeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemindNotice not implemented")
}
func (UnimplementedTeaManageServer) DeleteNotice(context.Context, *DeleteNoticeReq) (*DeleteNoticeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotice not implemented")
}
func (UnimplementedTeaManageServer) PublishNotice(context.Context, *PublishNoticeReq) (*PublishNoticeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishNotice not implemented")
}
func (UnimplementedTeaManageServer) mustEmbedUnimplementedTeaManageServer() {}
func (UnimplementedTeaManageServer) testEmbeddedByValue()                   {}

// UnsafeTeaManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeaManageServer will
// result in compilation errors.
type UnsafeTeaManageServer interface {
	mustEmbedUnimplementedTeaManageServer()
}

func RegisterTeaManageServer(s grpc.ServiceRegistrar, srv TeaManageServer) {
	// If the following call pancis, it indicates UnimplementedTeaManageServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TeaManage_ServiceDesc, srv)
}

func _TeaManage_CallbackReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallbackReceiptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeaManageServer).CallbackReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeaManage_CallbackReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeaManageServer).CallbackReceipt(ctx, req.(*CallbackReceiptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeaManage_RemindNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemindNoticeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeaManageServer).RemindNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeaManage_RemindNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeaManageServer).RemindNotice(ctx, req.(*RemindNoticeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeaManage_DeleteNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNoticeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeaManageServer).DeleteNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeaManage_DeleteNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeaManageServer).DeleteNotice(ctx, req.(*DeleteNoticeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeaManage_PublishNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishNoticeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeaManageServer).PublishNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeaManage_PublishNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeaManageServer).PublishNotice(ctx, req.(*PublishNoticeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TeaManage_ServiceDesc is the grpc.ServiceDesc for TeaManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeaManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TeaNoticeManage.v1.TeaManage",
	HandlerType: (*TeaManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallbackReceipt",
			Handler:    _TeaManage_CallbackReceipt_Handler,
		},
		{
			MethodName: "RemindNotice",
			Handler:    _TeaManage_RemindNotice_Handler,
		},
		{
			MethodName: "DeleteNotice",
			Handler:    _TeaManage_DeleteNotice_Handler,
		},
		{
			MethodName: "PublishNotice",
			Handler:    _TeaManage_PublishNotice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/TeaNoticeManage/v1/teaNoticeManage.proto",
}
