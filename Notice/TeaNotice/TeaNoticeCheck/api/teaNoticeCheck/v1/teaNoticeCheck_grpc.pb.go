// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: api/teaNoticeCheck/v1/teaNoticeCheck.proto

package teaNoticeCheck

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TeaCheck_GetNoticeDetails_FullMethodName       = "/TeaNoticeCheck.TeaCheck/GetNoticeDetails"
	TeaCheck_TeacherSearchNotice_FullMethodName    = "/TeaNoticeCheck.TeaCheck/TeacherSearchNotice"
	TeaCheck_GetPublishedNoticeList_FullMethodName = "/TeaNoticeCheck.TeaCheck/GetPublishedNoticeList"
)

// TeaCheckClient is the client API for TeaCheck service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 教师端通知查看服务定义
type TeaCheckClient interface {
	// 获取单条通知详情
	GetNoticeDetails(ctx context.Context, in *GetNoticeDetailsReq, opts ...grpc.CallOption) (*GetNoticeDetailsResp, error)
	// 教师端搜索通知
	TeacherSearchNotice(ctx context.Context, in *TeacherSearchNoticeReq, opts ...grpc.CallOption) (*TeacherSearchNoticeResp, error)
	// 查询已发布通知列表
	GetPublishedNoticeList(ctx context.Context, in *GetPublishedNoticeListReq, opts ...grpc.CallOption) (*GetPublishedNoticeListResp, error)
}

type teaCheckClient struct {
	cc grpc.ClientConnInterface
}

func NewTeaCheckClient(cc grpc.ClientConnInterface) TeaCheckClient {
	return &teaCheckClient{cc}
}

func (c *teaCheckClient) GetNoticeDetails(ctx context.Context, in *GetNoticeDetailsReq, opts ...grpc.CallOption) (*GetNoticeDetailsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNoticeDetailsResp)
	err := c.cc.Invoke(ctx, TeaCheck_GetNoticeDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teaCheckClient) TeacherSearchNotice(ctx context.Context, in *TeacherSearchNoticeReq, opts ...grpc.CallOption) (*TeacherSearchNoticeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TeacherSearchNoticeResp)
	err := c.cc.Invoke(ctx, TeaCheck_TeacherSearchNotice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teaCheckClient) GetPublishedNoticeList(ctx context.Context, in *GetPublishedNoticeListReq, opts ...grpc.CallOption) (*GetPublishedNoticeListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPublishedNoticeListResp)
	err := c.cc.Invoke(ctx, TeaCheck_GetPublishedNoticeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeaCheckServer is the server API for TeaCheck service.
// All implementations must embed UnimplementedTeaCheckServer
// for forward compatibility.
//
// 教师端通知查看服务定义
type TeaCheckServer interface {
	// 获取单条通知详情
	GetNoticeDetails(context.Context, *GetNoticeDetailsReq) (*GetNoticeDetailsResp, error)
	// 教师端搜索通知
	TeacherSearchNotice(context.Context, *TeacherSearchNoticeReq) (*TeacherSearchNoticeResp, error)
	// 查询已发布通知列表
	GetPublishedNoticeList(context.Context, *GetPublishedNoticeListReq) (*GetPublishedNoticeListResp, error)
	mustEmbedUnimplementedTeaCheckServer()
}

// UnimplementedTeaCheckServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTeaCheckServer struct{}

func (UnimplementedTeaCheckServer) GetNoticeDetails(context.Context, *GetNoticeDetailsReq) (*GetNoticeDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNoticeDetails not implemented")
}
func (UnimplementedTeaCheckServer) TeacherSearchNotice(context.Context, *TeacherSearchNoticeReq) (*TeacherSearchNoticeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherSearchNotice not implemented")
}
func (UnimplementedTeaCheckServer) GetPublishedNoticeList(context.Context, *GetPublishedNoticeListReq) (*GetPublishedNoticeListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublishedNoticeList not implemented")
}
func (UnimplementedTeaCheckServer) mustEmbedUnimplementedTeaCheckServer() {}
func (UnimplementedTeaCheckServer) testEmbeddedByValue()                  {}

// UnsafeTeaCheckServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeaCheckServer will
// result in compilation errors.
type UnsafeTeaCheckServer interface {
	mustEmbedUnimplementedTeaCheckServer()
}

func RegisterTeaCheckServer(s grpc.ServiceRegistrar, srv TeaCheckServer) {
	// If the following call pancis, it indicates UnimplementedTeaCheckServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TeaCheck_ServiceDesc, srv)
}

func _TeaCheck_GetNoticeDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNoticeDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeaCheckServer).GetNoticeDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeaCheck_GetNoticeDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeaCheckServer).GetNoticeDetails(ctx, req.(*GetNoticeDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeaCheck_TeacherSearchNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeacherSearchNoticeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeaCheckServer).TeacherSearchNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeaCheck_TeacherSearchNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeaCheckServer).TeacherSearchNotice(ctx, req.(*TeacherSearchNoticeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeaCheck_GetPublishedNoticeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublishedNoticeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeaCheckServer).GetPublishedNoticeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeaCheck_GetPublishedNoticeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeaCheckServer).GetPublishedNoticeList(ctx, req.(*GetPublishedNoticeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TeaCheck_ServiceDesc is the grpc.ServiceDesc for TeaCheck service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeaCheck_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TeaNoticeCheck.TeaCheck",
	HandlerType: (*TeaCheckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNoticeDetails",
			Handler:    _TeaCheck_GetNoticeDetails_Handler,
		},
		{
			MethodName: "TeacherSearchNotice",
			Handler:    _TeaCheck_TeacherSearchNotice_Handler,
		},
		{
			MethodName: "GetPublishedNoticeList",
			Handler:    _TeaCheck_GetPublishedNoticeList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/teaNoticeCheck/v1/teaNoticeCheck.proto",
}
