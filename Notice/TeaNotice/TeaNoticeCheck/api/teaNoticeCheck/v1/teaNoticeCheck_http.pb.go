// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.31.1
// source: api/teaNoticeCheck/v1/teaNoticeCheck.proto

package teaNoticeCheck

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTeaCheckGetNoticeDetails = "/TeaNoticeCheck.TeaCheck/GetNoticeDetails"
const OperationTeaCheckGetPublishedNoticeList = "/TeaNoticeCheck.TeaCheck/GetPublishedNoticeList"
const OperationTeaCheckTeacherSearchNotice = "/TeaNoticeCheck.TeaCheck/TeacherSearchNotice"

type TeaCheckHTTPServer interface {
	// GetNoticeDetails 获取单条通知详情
	GetNoticeDetails(context.Context, *GetNoticeDetailsReq) (*GetNoticeDetailsResp, error)
	// GetPublishedNoticeList 查询已发布通知列表
	GetPublishedNoticeList(context.Context, *GetPublishedNoticeListReq) (*GetPublishedNoticeListResp, error)
	// TeacherSearchNotice 教师端搜索通知
	TeacherSearchNotice(context.Context, *TeacherSearchNoticeReq) (*TeacherSearchNoticeResp, error)
}

func RegisterTeaCheckHTTPServer(s *http.Server, srv TeaCheckHTTPServer) {
	r := s.Route("/")
	r.GET("/teacher/notice/details/{notice_id}", _TeaCheck_GetNoticeDetails0_HTTP_Handler(srv))
	r.GET("/teacher/search/notice", _TeaCheck_TeacherSearchNotice0_HTTP_Handler(srv))
	r.GET("/teacher/search/notice/list", _TeaCheck_GetPublishedNoticeList0_HTTP_Handler(srv))
}

func _TeaCheck_GetNoticeDetails0_HTTP_Handler(srv TeaCheckHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetNoticeDetailsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTeaCheckGetNoticeDetails)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNoticeDetails(ctx, req.(*GetNoticeDetailsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetNoticeDetailsResp)
		return ctx.Result(200, reply)
	}
}

func _TeaCheck_TeacherSearchNotice0_HTTP_Handler(srv TeaCheckHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TeacherSearchNoticeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTeaCheckTeacherSearchNotice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TeacherSearchNotice(ctx, req.(*TeacherSearchNoticeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TeacherSearchNoticeResp)
		return ctx.Result(200, reply)
	}
}

func _TeaCheck_GetPublishedNoticeList0_HTTP_Handler(srv TeaCheckHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPublishedNoticeListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTeaCheckGetPublishedNoticeList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPublishedNoticeList(ctx, req.(*GetPublishedNoticeListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPublishedNoticeListResp)
		return ctx.Result(200, reply)
	}
}

type TeaCheckHTTPClient interface {
	GetNoticeDetails(ctx context.Context, req *GetNoticeDetailsReq, opts ...http.CallOption) (rsp *GetNoticeDetailsResp, err error)
	GetPublishedNoticeList(ctx context.Context, req *GetPublishedNoticeListReq, opts ...http.CallOption) (rsp *GetPublishedNoticeListResp, err error)
	TeacherSearchNotice(ctx context.Context, req *TeacherSearchNoticeReq, opts ...http.CallOption) (rsp *TeacherSearchNoticeResp, err error)
}

type TeaCheckHTTPClientImpl struct {
	cc *http.Client
}

func NewTeaCheckHTTPClient(client *http.Client) TeaCheckHTTPClient {
	return &TeaCheckHTTPClientImpl{client}
}

func (c *TeaCheckHTTPClientImpl) GetNoticeDetails(ctx context.Context, in *GetNoticeDetailsReq, opts ...http.CallOption) (*GetNoticeDetailsResp, error) {
	var out GetNoticeDetailsResp
	pattern := "/teacher/notice/details/{notice_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTeaCheckGetNoticeDetails))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TeaCheckHTTPClientImpl) GetPublishedNoticeList(ctx context.Context, in *GetPublishedNoticeListReq, opts ...http.CallOption) (*GetPublishedNoticeListResp, error) {
	var out GetPublishedNoticeListResp
	pattern := "/teacher/search/notice/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTeaCheckGetPublishedNoticeList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TeaCheckHTTPClientImpl) TeacherSearchNotice(ctx context.Context, in *TeacherSearchNoticeReq, opts ...http.CallOption) (*TeacherSearchNoticeResp, error) {
	var out TeacherSearchNoticeResp
	pattern := "/teacher/search/notice"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTeaCheckTeacherSearchNotice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
