// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.31.1
// source: api/receipt/v1/receipt.proto

package receipt

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationReceiptGetReceiptDownloadUrl = "/ReceiptCheck.Receipt/GetReceiptDownloadUrl"
const OperationReceiptGetReceiptList = "/ReceiptCheck.Receipt/GetReceiptList"
const OperationReceiptGetReceiptStyle = "/ReceiptCheck.Receipt/GetReceiptStyle"
const OperationReceiptGetReceiptWriteSingle = "/ReceiptCheck.Receipt/GetReceiptWriteSingle"

type ReceiptHTTPServer interface {
	GetReceiptDownloadUrl(context.Context, *GetReceiptDownloadUrlReq) (*GetReceiptDownloadUrlResp, error)
	GetReceiptList(context.Context, *GetReceiptListReq) (*GetReceiptListResp, error)
	GetReceiptStyle(context.Context, *GetReceiptStyleReq) (*GetReceiptStyleResp, error)
	GetReceiptWriteSingle(context.Context, *GetReceiptWriteSingleReq) (*GetReceiptWriteSingleResp, error)
}

func RegisterReceiptHTTPServer(s *http.Server, srv ReceiptHTTPServer) {
	r := s.Route("/")
	r.GET("/receipt/check/teacher/style", _Receipt_GetReceiptStyle0_HTTP_Handler(srv))
	r.GET("/receipt/check/list", _Receipt_GetReceiptList0_HTTP_Handler(srv))
	r.GET("/receipt/check/list/download_url", _Receipt_GetReceiptDownloadUrl0_HTTP_Handler(srv))
	r.GET("/receipt/check/Single", _Receipt_GetReceiptWriteSingle0_HTTP_Handler(srv))
}

func _Receipt_GetReceiptStyle0_HTTP_Handler(srv ReceiptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetReceiptStyleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationReceiptGetReceiptStyle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetReceiptStyle(ctx, req.(*GetReceiptStyleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetReceiptStyleResp)
		return ctx.Result(200, reply)
	}
}

func _Receipt_GetReceiptList0_HTTP_Handler(srv ReceiptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetReceiptListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationReceiptGetReceiptList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetReceiptList(ctx, req.(*GetReceiptListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetReceiptListResp)
		return ctx.Result(200, reply)
	}
}

func _Receipt_GetReceiptDownloadUrl0_HTTP_Handler(srv ReceiptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetReceiptDownloadUrlReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationReceiptGetReceiptDownloadUrl)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetReceiptDownloadUrl(ctx, req.(*GetReceiptDownloadUrlReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetReceiptDownloadUrlResp)
		return ctx.Result(200, reply)
	}
}

func _Receipt_GetReceiptWriteSingle0_HTTP_Handler(srv ReceiptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetReceiptWriteSingleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationReceiptGetReceiptWriteSingle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetReceiptWriteSingle(ctx, req.(*GetReceiptWriteSingleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetReceiptWriteSingleResp)
		return ctx.Result(200, reply)
	}
}

type ReceiptHTTPClient interface {
	GetReceiptDownloadUrl(ctx context.Context, req *GetReceiptDownloadUrlReq, opts ...http.CallOption) (rsp *GetReceiptDownloadUrlResp, err error)
	GetReceiptList(ctx context.Context, req *GetReceiptListReq, opts ...http.CallOption) (rsp *GetReceiptListResp, err error)
	GetReceiptStyle(ctx context.Context, req *GetReceiptStyleReq, opts ...http.CallOption) (rsp *GetReceiptStyleResp, err error)
	GetReceiptWriteSingle(ctx context.Context, req *GetReceiptWriteSingleReq, opts ...http.CallOption) (rsp *GetReceiptWriteSingleResp, err error)
}

type ReceiptHTTPClientImpl struct {
	cc *http.Client
}

func NewReceiptHTTPClient(client *http.Client) ReceiptHTTPClient {
	return &ReceiptHTTPClientImpl{client}
}

func (c *ReceiptHTTPClientImpl) GetReceiptDownloadUrl(ctx context.Context, in *GetReceiptDownloadUrlReq, opts ...http.CallOption) (*GetReceiptDownloadUrlResp, error) {
	var out GetReceiptDownloadUrlResp
	pattern := "/receipt/check/list/download_url"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationReceiptGetReceiptDownloadUrl))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ReceiptHTTPClientImpl) GetReceiptList(ctx context.Context, in *GetReceiptListReq, opts ...http.CallOption) (*GetReceiptListResp, error) {
	var out GetReceiptListResp
	pattern := "/receipt/check/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationReceiptGetReceiptList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ReceiptHTTPClientImpl) GetReceiptStyle(ctx context.Context, in *GetReceiptStyleReq, opts ...http.CallOption) (*GetReceiptStyleResp, error) {
	var out GetReceiptStyleResp
	pattern := "/receipt/check/teacher/style"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationReceiptGetReceiptStyle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ReceiptHTTPClientImpl) GetReceiptWriteSingle(ctx context.Context, in *GetReceiptWriteSingleReq, opts ...http.CallOption) (*GetReceiptWriteSingleResp, error) {
	var out GetReceiptWriteSingleResp
	pattern := "/receipt/check/Single"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationReceiptGetReceiptWriteSingle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
